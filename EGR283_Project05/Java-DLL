package Project05;
public class DLL<T> {

	private DLLNode<T> head;
	private DLLNode<T> tail;
	private int length;
	
	private static final String COLON_SPACE = ": ";
	private static final String NEW_LINE = "\n";
	
	
	public DLL() {
		this.length = 0;
		this.head = new DLLNode<T>();
		this.tail = new DLLNode<T>();
		this.head.setNext(tail);
		this.tail.setPrev(head);
	}//end bracket of default constructor
	
	
	public int size() {
		return this.length;
	}//end bracket of size method
	
	public T get(int position) {
		return (this.find(position)).getNodeData();
	}//end bracket of get method
	
	public void set(T newNodeData, int position) {
		this.find(position).setNodeData(newNodeData);
	}//end bracket of set method
	
	
	public void addAtHead(T newNodeData) {
		this.addAfter(this.getHead(), new DLLNode<T>(newNodeData));
	}//end bracket of addathead method
	
	public void addAtTail(T newNodeData) {
		this.addAfter(this.getTail().getPrev(), new DLLNode<T>(newNodeData));
	}//ending bracket of addAtTail method
	
	public void addAtPosition(T newNodeData, int position) {

		DLLNode<T> cursor = this.getHead();
		DLLNode<T> newNode = new DLLNode<T>(newNodeData);
		
		if(position > 0) {
			cursor = this.find(position - 1);
		}//ending bracket of if
		this.addAfter(cursor, newNode);
	}//end bracket of addAtPositionMethod
	
	public int find(Object obj) {
		int rv = -1;
		for(int i = 0; i < this.size(); ++i) {
			if(this.equals(obj)) {
				rv = i;
			}//end bracket of if
		}//end bracket of for loop
		return rv;
	}//end bracket of find
	

	
	public T remove(int position) {
		DLLNode<T> cursor = this.getHead();
		if(position > 0) {
			cursor = this.find(position - 1);
		}//end bracket of if position

			DLLNode<T> targetNode = cursor.getNext();
			(targetNode.getPrev()).setNext(targetNode.getNext());
			(targetNode.getNext()).setPrev(cursor);
			--this.length;
		
			T rv = targetNode.getNodeData();
			targetNode.setNext(null);
			targetNode.setNodeData(null);
			targetNode.setPrev(null);
	
		return rv;
	}//end bracket of remove

	public T remove(T target) {
		return this.remove(this.findIndex(target));
	}//end bracket of remove by data method
	
	protected DLLNode<T> getHead(){
		return this.head;
	}//end bracket of getHead method.
	
	protected DLLNode<T> getTail(){
		return this.tail;
	}//end bracket of getTail method
	
	public boolean isEmpty() {
		boolean rv = false;
		if (this.size() == 0) {
			rv = true;
		}
		return rv;
	}//end bracket of isEmpty method
	
	private void addAfter(DLLNode<T> currentNode, DLLNode<T> newNode) {
		newNode.setNext(currentNode.getNext());
		currentNode.setNext(newNode);
		newNode.setPrev(currentNode);
		newNode.getNext().setPrev(newNode);
		++this.length;
	}//ending bracket of addAfter method

	private int findIndex(T target) {
		DLLNode<T> cursor = this.getHead();
		int index = 0;
		//Continue to loop until we either reach the end of the list
		//or we find the target data
		while((cursor != this.getTail()) && (!cursor.getNodeData().equals(target))) {
			cursor = cursor.getNext();
			++index;
		}//ending bracket of while cursor is not tail or data
		
		//If we did not find the target data, set the index to -1
		if(!cursor.getNodeData().equals(target)) {
			index = -1;
		}//ending bracket of if cursor is not target.
		return index;
	}//end bracket of findIndex method
	
	private DLLNode<T> find(int position){
		DLLNode<T> cursor = null;
		
		if(position < (this.size()/2)) {
			cursor = this.getHead().getNext();
			for(int i = 0; i != position; ++i) {
				cursor = cursor.getNext();
			}//end bracket of for i ! position
		}//end bracket of if position < size
		else {
			cursor = this.getTail().getPrev();
			for(int i = this.size()-1; i != position; --i) {
				cursor = cursor.getPrev();
			}//end bracket of for i ! position
		}//end bracket of else
		return cursor;
	}//end bracket of find by position method

	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		
		DLLNode<T> cursor = this.head.getNext();
		int index =0;
		while(cursor != this.tail) {
			
			sb.append(index);
			sb.append(DLL.COLON_SPACE);
			sb.append(cursor.getNodeData().toString());
			sb.append(DLL.NEW_LINE);
			
			cursor = cursor.getNext();
			++index;
			
		}//end bracket of while loop
		return sb.toString();
	}//end bracket of toString
	
}//end bracket of DLL Class